//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: records.images.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Profilog_Records_Images_RecordsImagesGrpcServiceClient`, then call methods of this protocol to make API calls.
internal protocol Profilog_Records_Images_RecordsImagesGrpcServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Profilog_Records_Images_RecordsImagesGrpcServiceClientInterceptorFactoryProtocol? { get }

  func uploadImage(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Profilog_Records_Images_ImageFileChunk, Profilog_Records_Images_ImageUploadResponse>

  func getImage(
    _ request: Profilog_Records_Images_GetImageFileRequest,
    callOptions: CallOptions?,
    handler: @escaping (Profilog_Records_Images_GetImageFileResponse) -> Void
  ) -> ServerStreamingCall<Profilog_Records_Images_GetImageFileRequest, Profilog_Records_Images_GetImageFileResponse>
}

extension Profilog_Records_Images_RecordsImagesGrpcServiceClientProtocol {
  internal var serviceName: String {
    return "profilog.records.images.RecordsImagesGrpcService"
  }

  /// Client streaming call to UploadImage
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func uploadImage(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Profilog_Records_Images_ImageFileChunk, Profilog_Records_Images_ImageUploadResponse> {
    return self.makeClientStreamingCall(
      path: Profilog_Records_Images_RecordsImagesGrpcServiceClientMetadata.Methods.uploadImage.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadImageInterceptors() ?? []
    )
  }

  /// Server streaming call to GetImage
  ///
  /// - Parameters:
  ///   - request: Request to send to GetImage.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getImage(
    _ request: Profilog_Records_Images_GetImageFileRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Profilog_Records_Images_GetImageFileResponse) -> Void
  ) -> ServerStreamingCall<Profilog_Records_Images_GetImageFileRequest, Profilog_Records_Images_GetImageFileResponse> {
    return self.makeServerStreamingCall(
      path: Profilog_Records_Images_RecordsImagesGrpcServiceClientMetadata.Methods.getImage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetImageInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Profilog_Records_Images_RecordsImagesGrpcServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Profilog_Records_Images_RecordsImagesGrpcServiceNIOClient")
internal final class Profilog_Records_Images_RecordsImagesGrpcServiceClient: Profilog_Records_Images_RecordsImagesGrpcServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Profilog_Records_Images_RecordsImagesGrpcServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Profilog_Records_Images_RecordsImagesGrpcServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the profilog.records.images.RecordsImagesGrpcService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Profilog_Records_Images_RecordsImagesGrpcServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Profilog_Records_Images_RecordsImagesGrpcServiceNIOClient: Profilog_Records_Images_RecordsImagesGrpcServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Profilog_Records_Images_RecordsImagesGrpcServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the profilog.records.images.RecordsImagesGrpcService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Profilog_Records_Images_RecordsImagesGrpcServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Profilog_Records_Images_RecordsImagesGrpcServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Profilog_Records_Images_RecordsImagesGrpcServiceClientInterceptorFactoryProtocol? { get }

  func makeUploadImageCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Profilog_Records_Images_ImageFileChunk, Profilog_Records_Images_ImageUploadResponse>

  func makeGetImageCall(
    _ request: Profilog_Records_Images_GetImageFileRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Profilog_Records_Images_GetImageFileRequest, Profilog_Records_Images_GetImageFileResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Profilog_Records_Images_RecordsImagesGrpcServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Profilog_Records_Images_RecordsImagesGrpcServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Profilog_Records_Images_RecordsImagesGrpcServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeUploadImageCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Profilog_Records_Images_ImageFileChunk, Profilog_Records_Images_ImageUploadResponse> {
    return self.makeAsyncClientStreamingCall(
      path: Profilog_Records_Images_RecordsImagesGrpcServiceClientMetadata.Methods.uploadImage.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadImageInterceptors() ?? []
    )
  }

  internal func makeGetImageCall(
    _ request: Profilog_Records_Images_GetImageFileRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Profilog_Records_Images_GetImageFileRequest, Profilog_Records_Images_GetImageFileResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Profilog_Records_Images_RecordsImagesGrpcServiceClientMetadata.Methods.getImage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetImageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Profilog_Records_Images_RecordsImagesGrpcServiceAsyncClientProtocol {
  internal func uploadImage<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Profilog_Records_Images_ImageUploadResponse where RequestStream: Sequence, RequestStream.Element == Profilog_Records_Images_ImageFileChunk {
    return try await self.performAsyncClientStreamingCall(
      path: Profilog_Records_Images_RecordsImagesGrpcServiceClientMetadata.Methods.uploadImage.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadImageInterceptors() ?? []
    )
  }

  internal func uploadImage<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Profilog_Records_Images_ImageUploadResponse where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Profilog_Records_Images_ImageFileChunk {
    return try await self.performAsyncClientStreamingCall(
      path: Profilog_Records_Images_RecordsImagesGrpcServiceClientMetadata.Methods.uploadImage.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadImageInterceptors() ?? []
    )
  }

  internal func getImage(
    _ request: Profilog_Records_Images_GetImageFileRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Profilog_Records_Images_GetImageFileResponse> {
    return self.performAsyncServerStreamingCall(
      path: Profilog_Records_Images_RecordsImagesGrpcServiceClientMetadata.Methods.getImage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetImageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Profilog_Records_Images_RecordsImagesGrpcServiceAsyncClient: Profilog_Records_Images_RecordsImagesGrpcServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Profilog_Records_Images_RecordsImagesGrpcServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Profilog_Records_Images_RecordsImagesGrpcServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Profilog_Records_Images_RecordsImagesGrpcServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'uploadImage'.
  func makeUploadImageInterceptors() -> [ClientInterceptor<Profilog_Records_Images_ImageFileChunk, Profilog_Records_Images_ImageUploadResponse>]

  /// - Returns: Interceptors to use when invoking 'getImage'.
  func makeGetImageInterceptors() -> [ClientInterceptor<Profilog_Records_Images_GetImageFileRequest, Profilog_Records_Images_GetImageFileResponse>]
}

internal enum Profilog_Records_Images_RecordsImagesGrpcServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "RecordsImagesGrpcService",
    fullName: "profilog.records.images.RecordsImagesGrpcService",
    methods: [
      Profilog_Records_Images_RecordsImagesGrpcServiceClientMetadata.Methods.uploadImage,
      Profilog_Records_Images_RecordsImagesGrpcServiceClientMetadata.Methods.getImage,
    ]
  )

  internal enum Methods {
    internal static let uploadImage = GRPCMethodDescriptor(
      name: "UploadImage",
      path: "/profilog.records.images.RecordsImagesGrpcService/UploadImage",
      type: GRPCCallType.clientStreaming
    )

    internal static let getImage = GRPCMethodDescriptor(
      name: "GetImage",
      path: "/profilog.records.images.RecordsImagesGrpcService/GetImage",
      type: GRPCCallType.serverStreaming
    )
  }
}

