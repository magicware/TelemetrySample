//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: playground.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Profilog_Playground_PlaygroundGrpcServiceClient`, then call methods of this protocol to make API calls.
internal protocol Profilog_Playground_PlaygroundGrpcServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Profilog_Playground_PlaygroundGrpcServiceClientInterceptorFactoryProtocol? { get }

  func generateNumbers(
    _ request: Profilog_Playground_GenerateNumbersRequest,
    callOptions: CallOptions?,
    handler: @escaping (Profilog_Playground_GenerateNumbersResponse) -> Void
  ) -> ServerStreamingCall<Profilog_Playground_GenerateNumbersRequest, Profilog_Playground_GenerateNumbersResponse>

  func storeNumbers(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Profilog_Playground_StoreNumbersRequest, Profilog_Playground_StoreNumbersResponse>

  func storeAndReturnNumbers(
    callOptions: CallOptions?,
    handler: @escaping (Profilog_Playground_StoreAndReturnNumbersResponse) -> Void
  ) -> BidirectionalStreamingCall<Profilog_Playground_StoreAndReturnNumbersRequest, Profilog_Playground_StoreAndReturnNumbersResponse>

  func storeAndReturnNumbers2(
    callOptions: CallOptions?,
    handler: @escaping (Profilog_Playground_StoreAndReturnNumbersResponse2) -> Void
  ) -> BidirectionalStreamingCall<Profilog_Playground_StoreAndReturnNumbersRequest2, Profilog_Playground_StoreAndReturnNumbersResponse2>

  func storeAndReturnNumbers3(
    callOptions: CallOptions?,
    handler: @escaping (Profilog_Playground_StoreAndReturnNumbersResponse3) -> Void
  ) -> BidirectionalStreamingCall<Profilog_Playground_StoreAndReturnNumbersRequest3, Profilog_Playground_StoreAndReturnNumbersResponse3>
}

extension Profilog_Playground_PlaygroundGrpcServiceClientProtocol {
  internal var serviceName: String {
    return "profilog.playground.PlaygroundGrpcService"
  }

  /// stream čísel. V requestu pošlu, že chci třeba 10 čísel a zároveň i delay, kterým se bude simulovat nějaká náročná činnost na server
  /// výsledkem bude stream s těmito čísly
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateNumbers.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func generateNumbers(
    _ request: Profilog_Playground_GenerateNumbersRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Profilog_Playground_GenerateNumbersResponse) -> Void
  ) -> ServerStreamingCall<Profilog_Playground_GenerateNumbersRequest, Profilog_Playground_GenerateNumbersResponse> {
    return self.makeServerStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.generateNumbers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateNumbersInterceptors() ?? [],
      handler: handler
    )
  }

  /// simulace ukládání. Na server se bude posílat stream, kde bude vždy číslo (které jakoby chci uložit) a delay, které bude simulovat nějakou práci serveru.
  /// vrátí Ano/Ne. V případě, že třeba poslední číslo bylo sudé, tak Ano, jinak Ne.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func storeNumbers(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Profilog_Playground_StoreNumbersRequest, Profilog_Playground_StoreNumbersResponse> {
    return self.makeClientStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeNumbers.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreNumbersInterceptors() ?? []
    )
  }

  /// kombinace obou předchozích metod. Na server se posílá stream s čísly, u kterých kterých se simuluje uložení (pomocí parametru delay v ms).
  /// Čísla ze vstupního streamu jsou po "uložení" zapisována do výstupního streamu
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func storeAndReturnNumbers(
    callOptions: CallOptions? = nil,
    handler: @escaping (Profilog_Playground_StoreAndReturnNumbersResponse) -> Void
  ) -> BidirectionalStreamingCall<Profilog_Playground_StoreAndReturnNumbersRequest, Profilog_Playground_StoreAndReturnNumbersResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAndReturnNumbersInterceptors() ?? [],
      handler: handler
    )
  }

  /// varianta StoreAndReturnNumbers metody. Na server se posílá stream s čísly, u kterých kterých se simuluje uložení (pomocí parametru delay v ms).
  /// Po každém třetím uloženém čísle je jejich součet zapsán do výstupního streamu
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func storeAndReturnNumbers2(
    callOptions: CallOptions? = nil,
    handler: @escaping (Profilog_Playground_StoreAndReturnNumbersResponse2) -> Void
  ) -> BidirectionalStreamingCall<Profilog_Playground_StoreAndReturnNumbersRequest2, Profilog_Playground_StoreAndReturnNumbersResponse2> {
    return self.makeBidirectionalStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers2.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAndReturnNumbers2Interceptors() ?? [],
      handler: handler
    )
  }

  /// varianta StoreAndReturnNumbers metody. Na server se posílá stream vždy se třemi čísli v jednom chunku, 
  /// u kterých kterých se simuluje uložení (pomocí parametru delay v ms).
  /// Každé jedno číslo je ihned po uložení samostaně zapsáno do výstupního streamu
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func storeAndReturnNumbers3(
    callOptions: CallOptions? = nil,
    handler: @escaping (Profilog_Playground_StoreAndReturnNumbersResponse3) -> Void
  ) -> BidirectionalStreamingCall<Profilog_Playground_StoreAndReturnNumbersRequest3, Profilog_Playground_StoreAndReturnNumbersResponse3> {
    return self.makeBidirectionalStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers3.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAndReturnNumbers3Interceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Profilog_Playground_PlaygroundGrpcServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Profilog_Playground_PlaygroundGrpcServiceNIOClient")
internal final class Profilog_Playground_PlaygroundGrpcServiceClient: Profilog_Playground_PlaygroundGrpcServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Profilog_Playground_PlaygroundGrpcServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Profilog_Playground_PlaygroundGrpcServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the profilog.playground.PlaygroundGrpcService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Profilog_Playground_PlaygroundGrpcServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Profilog_Playground_PlaygroundGrpcServiceNIOClient: Profilog_Playground_PlaygroundGrpcServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Profilog_Playground_PlaygroundGrpcServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the profilog.playground.PlaygroundGrpcService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Profilog_Playground_PlaygroundGrpcServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Profilog_Playground_PlaygroundGrpcServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Profilog_Playground_PlaygroundGrpcServiceClientInterceptorFactoryProtocol? { get }

  func makeGenerateNumbersCall(
    _ request: Profilog_Playground_GenerateNumbersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Profilog_Playground_GenerateNumbersRequest, Profilog_Playground_GenerateNumbersResponse>

  func makeStoreNumbersCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Profilog_Playground_StoreNumbersRequest, Profilog_Playground_StoreNumbersResponse>

  func makeStoreAndReturnNumbersCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Profilog_Playground_StoreAndReturnNumbersRequest, Profilog_Playground_StoreAndReturnNumbersResponse>

  func makeStoreAndReturnNumbers2Call(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Profilog_Playground_StoreAndReturnNumbersRequest2, Profilog_Playground_StoreAndReturnNumbersResponse2>

  func makeStoreAndReturnNumbers3Call(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Profilog_Playground_StoreAndReturnNumbersRequest3, Profilog_Playground_StoreAndReturnNumbersResponse3>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Profilog_Playground_PlaygroundGrpcServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Profilog_Playground_PlaygroundGrpcServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Profilog_Playground_PlaygroundGrpcServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGenerateNumbersCall(
    _ request: Profilog_Playground_GenerateNumbersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Profilog_Playground_GenerateNumbersRequest, Profilog_Playground_GenerateNumbersResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.generateNumbers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateNumbersInterceptors() ?? []
    )
  }

  internal func makeStoreNumbersCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Profilog_Playground_StoreNumbersRequest, Profilog_Playground_StoreNumbersResponse> {
    return self.makeAsyncClientStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeNumbers.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreNumbersInterceptors() ?? []
    )
  }

  internal func makeStoreAndReturnNumbersCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Profilog_Playground_StoreAndReturnNumbersRequest, Profilog_Playground_StoreAndReturnNumbersResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAndReturnNumbersInterceptors() ?? []
    )
  }

  internal func makeStoreAndReturnNumbers2Call(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Profilog_Playground_StoreAndReturnNumbersRequest2, Profilog_Playground_StoreAndReturnNumbersResponse2> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers2.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAndReturnNumbers2Interceptors() ?? []
    )
  }

  internal func makeStoreAndReturnNumbers3Call(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Profilog_Playground_StoreAndReturnNumbersRequest3, Profilog_Playground_StoreAndReturnNumbersResponse3> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers3.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAndReturnNumbers3Interceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Profilog_Playground_PlaygroundGrpcServiceAsyncClientProtocol {
  internal func generateNumbers(
    _ request: Profilog_Playground_GenerateNumbersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Profilog_Playground_GenerateNumbersResponse> {
    return self.performAsyncServerStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.generateNumbers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateNumbersInterceptors() ?? []
    )
  }

  internal func storeNumbers<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Profilog_Playground_StoreNumbersResponse where RequestStream: Sequence, RequestStream.Element == Profilog_Playground_StoreNumbersRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeNumbers.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreNumbersInterceptors() ?? []
    )
  }

  internal func storeNumbers<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Profilog_Playground_StoreNumbersResponse where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Profilog_Playground_StoreNumbersRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeNumbers.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreNumbersInterceptors() ?? []
    )
  }

  internal func storeAndReturnNumbers<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Profilog_Playground_StoreAndReturnNumbersResponse> where RequestStream: Sequence, RequestStream.Element == Profilog_Playground_StoreAndReturnNumbersRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAndReturnNumbersInterceptors() ?? []
    )
  }

  internal func storeAndReturnNumbers<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Profilog_Playground_StoreAndReturnNumbersResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Profilog_Playground_StoreAndReturnNumbersRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAndReturnNumbersInterceptors() ?? []
    )
  }

  internal func storeAndReturnNumbers2<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Profilog_Playground_StoreAndReturnNumbersResponse2> where RequestStream: Sequence, RequestStream.Element == Profilog_Playground_StoreAndReturnNumbersRequest2 {
    return self.performAsyncBidirectionalStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers2.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAndReturnNumbers2Interceptors() ?? []
    )
  }

  internal func storeAndReturnNumbers2<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Profilog_Playground_StoreAndReturnNumbersResponse2> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Profilog_Playground_StoreAndReturnNumbersRequest2 {
    return self.performAsyncBidirectionalStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers2.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAndReturnNumbers2Interceptors() ?? []
    )
  }

  internal func storeAndReturnNumbers3<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Profilog_Playground_StoreAndReturnNumbersResponse3> where RequestStream: Sequence, RequestStream.Element == Profilog_Playground_StoreAndReturnNumbersRequest3 {
    return self.performAsyncBidirectionalStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers3.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAndReturnNumbers3Interceptors() ?? []
    )
  }

  internal func storeAndReturnNumbers3<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Profilog_Playground_StoreAndReturnNumbersResponse3> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Profilog_Playground_StoreAndReturnNumbersRequest3 {
    return self.performAsyncBidirectionalStreamingCall(
      path: Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers3.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAndReturnNumbers3Interceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Profilog_Playground_PlaygroundGrpcServiceAsyncClient: Profilog_Playground_PlaygroundGrpcServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Profilog_Playground_PlaygroundGrpcServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Profilog_Playground_PlaygroundGrpcServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Profilog_Playground_PlaygroundGrpcServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'generateNumbers'.
  func makeGenerateNumbersInterceptors() -> [ClientInterceptor<Profilog_Playground_GenerateNumbersRequest, Profilog_Playground_GenerateNumbersResponse>]

  /// - Returns: Interceptors to use when invoking 'storeNumbers'.
  func makeStoreNumbersInterceptors() -> [ClientInterceptor<Profilog_Playground_StoreNumbersRequest, Profilog_Playground_StoreNumbersResponse>]

  /// - Returns: Interceptors to use when invoking 'storeAndReturnNumbers'.
  func makeStoreAndReturnNumbersInterceptors() -> [ClientInterceptor<Profilog_Playground_StoreAndReturnNumbersRequest, Profilog_Playground_StoreAndReturnNumbersResponse>]

  /// - Returns: Interceptors to use when invoking 'storeAndReturnNumbers2'.
  func makeStoreAndReturnNumbers2Interceptors() -> [ClientInterceptor<Profilog_Playground_StoreAndReturnNumbersRequest2, Profilog_Playground_StoreAndReturnNumbersResponse2>]

  /// - Returns: Interceptors to use when invoking 'storeAndReturnNumbers3'.
  func makeStoreAndReturnNumbers3Interceptors() -> [ClientInterceptor<Profilog_Playground_StoreAndReturnNumbersRequest3, Profilog_Playground_StoreAndReturnNumbersResponse3>]
}

internal enum Profilog_Playground_PlaygroundGrpcServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PlaygroundGrpcService",
    fullName: "profilog.playground.PlaygroundGrpcService",
    methods: [
      Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.generateNumbers,
      Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeNumbers,
      Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers,
      Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers2,
      Profilog_Playground_PlaygroundGrpcServiceClientMetadata.Methods.storeAndReturnNumbers3,
    ]
  )

  internal enum Methods {
    internal static let generateNumbers = GRPCMethodDescriptor(
      name: "GenerateNumbers",
      path: "/profilog.playground.PlaygroundGrpcService/GenerateNumbers",
      type: GRPCCallType.serverStreaming
    )

    internal static let storeNumbers = GRPCMethodDescriptor(
      name: "StoreNumbers",
      path: "/profilog.playground.PlaygroundGrpcService/StoreNumbers",
      type: GRPCCallType.clientStreaming
    )

    internal static let storeAndReturnNumbers = GRPCMethodDescriptor(
      name: "StoreAndReturnNumbers",
      path: "/profilog.playground.PlaygroundGrpcService/StoreAndReturnNumbers",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let storeAndReturnNumbers2 = GRPCMethodDescriptor(
      name: "StoreAndReturnNumbers2",
      path: "/profilog.playground.PlaygroundGrpcService/StoreAndReturnNumbers2",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let storeAndReturnNumbers3 = GRPCMethodDescriptor(
      name: "StoreAndReturnNumbers3",
      path: "/profilog.playground.PlaygroundGrpcService/StoreAndReturnNumbers3",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

